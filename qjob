#! /bin/bash

echo -e "qjob (C) 2024 Ananya Adhikari"
echo -e "based on submitjob (C) 2002 Wolfgang Tichy"

qjob="qjob "
for ARG in "$@"; do
  if [ -z "${ARG}" ] || [[ ${ARG} =~ \  ]]
  then
    qjob="$qjob \"$ARG\""
  else
    qjob="$qjob $ARG"
  fi
done
export qjob
export MPIBOOT=""
export MPIHALT=""
export OMP_NUM_THREADS=""

export hostname=`hostname -d`

# Save the current IFS value
OLD_IFS=$IFS

if command -v dircolors &> /dev/null; 
then
  # Set the delimiter
  IFS=':'
  
  # extract all colors in LS_COLORS
  read -ra colors_specs <<< "$(dircolors)"
  
  for colors_spec in "${colors_specs[@]}";
  do
    #if echo -e $colors_spec | grep 'di=' &> /dev/null;
    #then
    #  echo -e "$colors_spec"
    #fi
    IFS='='
    read -ra tokens <<< "$colors_spec"
#    echo -e -e "\e[${tokens[-1]}m Test\e[m"
    if [ "${tokens[0]}" = di ]
    then
      #echo -e "$colors_spec"
      hec=${tokens[-1]}
    elif [ "${tokens[0]}" = ln ]
    then
      pac=${tokens[-1]}
    fi
  done
  
else
  #echo -e "not there"
  hec="01;34"
  pac="01;36"
fi

# Reset IFS to its default value
IFS=$OLD_IFS

bt=$(tput bold)
he="\033[${hec}m"
pa="\033[${pac}m"
rt=$(tput sgr0)

d="$(date)"
da=($d)

#############
# for KOKO: #
#############
#if [[ $HOSTNAME =~ koko-login ]]
if [[ $HOSTNAME =~ saturn ]]
then

  if [ -z $1 ]
  then
    echo -e "${he}USAGE:${rt}"
    echo -e "${bt}qjob${rt} ${pa}nodes ppn tpn walltime queue constraint njobs jobname command [parfile]${rt}"
    echo -e "     |     |   |     |       |       |       ${pa}njobs${rt}=1,2,3,...:DependOnID   "
    echo -e "     |     |   |     |       |    ${pa}constraint${rt}=${bt}\"\"${rt},${bt}intel${rt},${bt}epyc${rt},${bt}haswell${rt},..."
    echo -e "     |     |   |     |      ${pa}queue${rt}=${bt}longq7${rt},${bt}shortq7${rt},..."
    echo -e "     |     |   |   ${pa}walltime${rt}=${bt}6:00:00${rt},${bt}72:00:00${rt},${bt}168:00:00${rt},..."
    echo -e "     |     |   ${pa}tpn${rt}=1,2,3,.....;${bt}auto${rt}[OMP thread/MPI proc]"
    echo -e "     |     ${pa}ppn${rt}=1,2,3....;${bt}all${rt};${bt}auto${rt}[MPI proc/node]"
    echo -e "     ${pa}nodes${rt}=1,2,..;${bt}serial${rt}"
    echo
    echo -e "For detailed info, use:"
    echo -e "${bt}qjob -h${rt}"
  elif [ $1 = -h ]
  then
    echo -e "${he}USAGE:${rt}"
    echo -e "${bt}qjob${rt} ${pa}nodes ppn tpn walltime queue constraint njobs jobname command [parfile]${rt}"
    echo
    echo -e "${he}NOTE${rt}: ${bt}qjob${rt} only works if you have placed the associated file \
${bt}batch_script${rt}"
    echo -e "      inside the directory: ${bt}~/bin/${rt} ."
    echo -e "      If you do not have this directory,"
    echo -e "      please create it and put the file there."
    echo
    echo -e "${he}OPTIONS:${rt}"
    echo -e "${pa}nodes${rt}: total number of nodes for job"
    echo -e "  This can be a number (for MPI based jobs usually)"
    echo -e "  or it could ${bt}serial${rt} to use only one proc (MPI) in one node"
    echo -e "  possibly with threads (usually OpenMP)."
    echo
    echo -e "${pa}ppn${rt}: processes (usually MPI) per node"
    echo -e "  This can be a number within the maximum processes permitted for node type"
    echo -e "  or it could be ${bt}all${rt} to use all available procs on node as MPI procs"
    echo -e "  or it could be ${bt}auto${rt} to set this based on ${bt}serial${rt} option \
for ${pa}nodes${rt}"
    echo -e "  or ${pa}tpn${rt} as follows:"
    echo -e "    if      ${pa}node${rt} = ${bt}serial${rt}: ${pa}ppn${rt} = 1"
    echo -e "    else if ${pa}ppn${rt}  = ${bt}auto${rt}  : ${pa}ppn${rt} = (maximum procs on node)/${pa}tpn${rt}"
    echo -e "  ${he}Note${rt}: Option ${bt}auto${rt} only works if ${pa}node${rt} is ${bt}serial${rt} or ${pa}tpn${rt} is a number."
    echo -e "        If ${pa}node${rt} is ${bt}serial${rt}, ${pa}ppn${rt} will be always set to 1,"
    echo -e "        irrespective of user specification for ${pa}ppn${rt}."
    echo
    echo -e "${pa}tpn${rt}: threads (usually OpenMP) per proc (usually MPI)"
    echo -e "  This can be a number within the maximum processes permitted for node type"
    echo -e "  or it could be ${bt}auto${rt} to set this based on ${pa}ppn${rt} as follows:"
    echo -e "    if ${pa}tpn${rt} = ${bt}auto${rt}: ${pa}tpn${rt} = (maximum procs on node)/${pa}ppn${rt}"
    echo -e "  ${he}Note${rt}: Both ${pa}ppn${rt} and ${pa}tpn${rt} can be set to ${bt}auto${rt} only when ${pa}node${rt} is ${bt}serial${rt}."
    echo -e "        Otherwise ${pa}tpn${rt} can be ${bt}auto${rt} only when ${pa}ppn${rt} is ${bt}all${rt} or a number."
    echo -e "        If ${pa}node${rt} is ${bt}serial${rt}, ${pa}ppn${rt} will be always set to 1,"
    echo -e "        and so if ${pa}tpn${rt} is ${bt}auto${rt} then, it uses all procs on node as threads."
    echo -e "        If setting both ${pa}ppn${rt} and ${pa}tpn${rt} manually, one has to maintain:"
    echo -e "          ${pa}ppn${rt} x ${pa}tpn${rt} = maximum procs on node"
    echo
    echo -e "${pa}walltime${rt}: time requested on queue for job"
    echo -e "  This can be a time, within the maximum limit"
    echo -e "  for the queue(partition) selected, in the format: ${bt}hhh:mm:ss${rt}."
    echo -e "  This can also be ${bt}max${rt}, which then sets the time to"
    echo -e "  maximum permitted for the selected queue."
    echo -e "  Check ${pa}queue${rt} info below for maximum time limits for each queue."
    echo
    echo -e "${pa}queue${rt}: queue(partition) selected"
    echo -e "  This can be: ${bt}debug${rt}, ${bt}shortq7${rt}, ${bt}mediumq7${rt}, ${bt}longq7${rt}."
    echo -e "  Not all nodes are permitted to run on every queue."
    echo -e "  Check ${pa}constraint${rt} info below for which node can be run on which queue."
    echo -e "  ${he}Note${rt}: Sgrid runs should be put in ${bt}longq7${rt}."
    echo
    echo -e "  Maximum time limits of (CPU) queues as of ${da[1]} ${da[2]}, ${da[5]}:"
    echo -e "  ${he}queue         time limit        priority level(1=highest)${rt}"
    echo -e "  ${bt}debug${rt}           1:00:00               1"
    echo -e "  ${bt}shortq7${rt}         6:00:00               2"
    echo -e "  ${bt}mediumq7${rt}       72:00:00               3"
    echo -e "  ${bt}longq7${rt}        168:00:00               4"
    echo
    echo -e "  For more details, check:"
    echo -e "  https://helpdesk.fau.edu/TDClient/2061/Portal/KB/ArticleDet?ID=141348"
    echo
    echo -e "${pa}constraint${rt}: constraint to request specific targeted node"
    echo -e "  This is can be the specific constraint for a node type (listed below),"
    echo -e "  or a general constraint specification of ${bt}epyc${rt} or ${bt}amd${rt}"
    echo -e "  or ${bt}intel${rt} or ${bt}ib${rt} or blank specification as ${bt}""${rt}."
    echo -e "  ${he}Note${rt}: Specifications ${bt}all${rt} option for ${pa}ppn${rt} and ${bt}auto${rt} for ${pa}ppn${rt} and ${pa}tpn${rt}"
    echo -e "        depend on the ${pa}constraint${rt} specified as that decides"
    echo -e "        the maximum procs on node for the specific node type."
    echo -e "        For general ${pa}constraint${rt} ${bt}epyc${rt} or ${bt}amd${rt} this maximum is 64,"
    echo -e "        while for ${bt}intel${rt} or ${bt}ib${rt} or ${bt}""${rt} this is 20."
    echo
    echo -e "  List of nodes and their constraints and specs as of ${da[1]} ${da[1]}, ${da[5]}:"
    echo -e "${pa}njobs${rt}  :"
    echo -e "${pa}jobname${rt} : "
    echo -e "${pa}command${rt} :"
    echo -e "${pa}parfile (optional)${rt}:"
  else
    export mode=$1
    export nodes=$1
    #if [ $mode = serial ]
    #then
    #  export nodes=1
    #fi
    export ppn=$2
    export ppn_mode=$2
    export tpn=$3
    export tpn_mode=$3
    export memory=""
    export walltime=$4
    export queue=$5
    export constraint=$6
    export njobs=`echo -e $7 | awk --field-separator ':' '{ print $1 }'`
    export DependOnID=`echo -e $7 | awk --field-separator ':' '{ print $2 }'`
    # export account=$7
    export account="dummyaccount"
    export jobname=$8
    export command=$9
    export parfile=${10}

    if [ -z "${parfile}" ]
    then
      export parfile=$jobname
    fi

    if [ $walltime = max ]
    then
      if [ $queue = debug ]
      then
        export walltime='1:00:00'
      elif [ $queue = shortq7 ]
      then
        export walltime='6:00:00'
      elif [ $queue = mediumq7 ]
      then
        export walltime='72:00:00'
      elif [ $queue = longq7 ]
      then
        export walltime='168:00:00'
      else
        echo "Unknown queue spec."
        export walltime=''
      fi
    fi

    #let procs=nodes*ppn
    #export procs

    # set tpn_max appropriately for main 2 types of nodes
    if [ C$constraint = Cepyc ]
    then
      tpn_max=64
    else
      tpn_max=20
    fi

    # for amd constraints
    if [ C$constraint = Cepyc7702 ]
    then
      tpn_max=256
    elif [ C$constraint = Cepyc7551 ]
    then
      tpn_max=64
    # for intel constraints
    elif [ C$constraint = Ce2680 ]
    then
      tpn_max=40
    elif [ C$constraint = Ce2660 ]
    then
      tpn_max=32
    elif [ C$constraint = Cepyc74f3 ]
    then
      tpn_max=96
    elif [ C$constraint = Cepyc7282 ]
    then
      tpn_max=
    elif [ C$constraint = Cxeon613 ]
    then
      tpn_max=64
    elif [ C$constraint = Ce52660 ]
    then
      tpn_max=40
    elif [ C$constraint = Ce52660 ]
    then
      tpn_max=
    fi
    # there should be more constraints...

    # set ppn properly
    if [ $mode = serial ] # only can use 1 node with 1 proc in serial mode
    then
      export nodes=1
      export ppn=1
    elif [ $ppn_mode = all ] # use all cores per node for MPI procs
    then
      let ppn=tpn_max
      export ppn
    elif [ $ppn_mode = auto ] # set ppn appropriately if tpn is specified, using max cpus per node
    then
      let ppn=tpn_max/tpn
      export ppn
    fi

    # set tpn correctly 
    if  [ $tpn_mode = auto ] # set tpn appropriately if ppn is specified, using max cpus per node
    then
      let tpn=tpn_max/ppn
      export tpn
    elif [ $ppn_mode = all ] && [ $mode != serial ] # use all cores per node for MPI, so 1 thread/proc
    then
      export tpn=1
    fi

    # set total numbers of MPI procs correctly
    let procs=nodes*ppn
    export procs

    # compute OMP_NUM_THREADS for OpenMP
    let OMP_NUM_THREADS=tpn
    export OMP_NUM_THREADS
 
    if [ $mode = serial ]
    then
      export MPIRUN="$command $parfile"
    else
      # export MPIRUN="mpirun -np $procs $command $parfile"
      export MPIRUN="prun $command $parfile"
    fi

    # these two can be used to have more MPI tags with Intel's MPI
    # sum of TAG_BITS and RANK_BITS has to be 39, e.g. 30+9:
    export MPIR_CVAR_CH4_OFI_TAG_BITS
    export MPIR_CVAR_CH4_OFI_RANK_BITS
    export OMPI_MCA_mpi_preconnect_all=1

    echo -e "HOSTNAME = $HOSTNAME , i.e. KOKO"
    echo -e "nodes = $nodes"
    echo -e "ppn = $ppn"
    echo -e "tpn = $tpn"
    echo -e "procs = $procs"
    echo -e "OMP_NUM_THREADS = $OMP_NUM_THREADS"
    echo -e "walltime = $walltime"
    echo -e "queue = $queue"
    echo -e "constraint = $constraint"
    echo -e "njobs = $njobs"
    echo -e "account = $account"
    echo -e "jobname = $jobname"
    echo -e "command = $command"
    echo -e "parfile = $parfile"
    echo
    echo -e "MPIRUN = $MPIRUN"

    if [ -z "${DependOnID}" ]
    then
      LASTJOBID=ThereIsNoJobToDependOn
    else
      LASTJOBID=$DependOnID
    fi
    i=1
    while [ $i -le $njobs ];
    do
      QSUB="sbatch -t $walltime \
                   --nodes=$nodes --exclusive \
                   --ntasks=$procs \
                   --cpus-per-task=$OMP_NUM_THREADS \
                   --mem=0 \
                   -A $account \
                   -J $jobname \
                   -p $queue \
                   -o $parfile.o%J"
      if [ $LASTJOBID = ThereIsNoJobToDependOn ];
      then
        QSUB2=""
      else
        QSUB2="      -d afterany:$LASTJOBID"
      fi
      QSUB="$QSUB$QSUB2"

      if [ -z "${constraint}" ]
      then
        QSUB2=""
      else
        QSUB2="      -C $constraint"
      fi
      QSUB="$QSUB$QSUB2"

      QSUB="$QSUB \
            $HOME/bin/slurm_mpirun_script"
      export QSUB
      echo
      echo -e "calling sbatch:"
      echo -e $QSUB | tee -a $jobname.last-sbatch
      # execute qsub and save output also in $jobname.last-sbatch
      $QSUB | tee -a $jobname.last-sbatch
      LASTJOBID=`tail -n1 $jobname.last-sbatch | awk '{ print $NF }'`

      let i=i+1
    done    # end of while loop
 fi
# End of KOKO

#####################
# for unknown host: #
#####################
else
 echo -e "Environment variable HOSTNAME=$HOSTNAME"
 echo -e "This host is unknown to me. I don't know what to do. :("
fi